@page "/Top10Movies"
@using MyFavoriteMovies.Models
@using Newtonsoft.Json

@inject HttpClient Http


<head>
    <meta charset="utf-8" />
    <link href="css/video-popup.css" rel="stylesheet" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <div class="container">
        <h1 class="header__title">Top 10 Highest IMDB Score Movies</h1>
        <p class="header__subtitle">Discover the best rated movies of all time.</p>
    </div>

</head>

@if (Movies == null)
{
    <p>Loading...</p>
}
else
{

    <body>
    <main>
        <div class="container">
            <div class="movie-grid">
                @foreach (var movie in Movies)
                    {
                        <div class="movie-card" @onclick="async () => await ShowMovieVideo(movie.Id)">
                            <img src="@($"https://image.tmdb.org/t/p/w200{movie.Poster_Path}")" alt="@movie.Title" />
                            <div class="movie-details">
                                <h2>@movie.Title</h2>
                                <p>Release Date: @movie.Release_Date</p>
                                <p>@movie.Overview</p>
                                <p>IMDB: @movie.Vote_Average</p>

                            </div>
                        </div>
                    }
                </div>
            </div>
        </main>
    </body>
}


@code {
    private List<Movie>? Movies;
    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    private IJSObjectReference _jsModule;

    private string apiKey = "YOUR_API_KEY_HERE";
    protected override async Task OnInitializedAsync()
    {
        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./jsExamples.js");

        var apiUrl = $"https://api.themoviedb.org/3/movie/top_rated?api_key={apiKey}&language=en-US&page=1";
        var response = await Http.GetFromJsonAsync<MovieResponse>(apiUrl);
        Movies = response.Results.Take(10).ToList();
    }
    public async Task ShowAlertWindow(int movieId)
    {
        await _jsModule.InvokeVoidAsync("showAlert", movieId);
    }
    public async Task ShowMovieVideo(int movieId)
    {
        MovieVideo video = new MovieVideo();
        var apiUrl = $"https://api.themoviedb.org/3/movie/{movieId}/videos?api_key={apiKey}&language=en-US";
        var response = await Http.GetFromJsonAsync<MovieVideoResponse>(apiUrl);
        video = response.Results.FirstOrDefault();

        if (video != null)
        {
            IJSObjectReference _jsModuleYoutube;
            _jsModuleYoutube = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./moviePopup.js");
            // Show the video popup
            await _jsModuleYoutube.InvokeVoidAsync("showVideoPopup", video.Key);
        }
    }

    private class MovieResponse
    {
        public List<Movie> Results { get; set; }
    }

    private class MovieVideoResponse
    {
        public List<MovieVideo> Results { get; set; }
    }
}
